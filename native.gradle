ext.isArm = hasProperty("arm")
def compilerPrefix = project.hasProperty('compilerPrefix') ? project.compilerPrefix : 'arm-frc-linux-gnueabi-'

subprojects {
    plugins.withType(CPlugin).whenPluginAdded {
        model {
            platforms {
                if (isArm) {
                    arm {
                        architecture 'arm'
                        operatingSystem 'linux'
                    }
                } else {
                    x86 {
                        architecture 'x86'
                    }
                    x64 {
                        architecture 'x86_64'
                    }
                }
            }
            
            toolChains {
                gcc(Gcc) {
                    target("arm") {
                        cCompiler.executable = compilerPrefix + cCompiler.executable
                        linker.executable = compilerPrefix + linker.executable
                        assembler.executable = compilerPrefix + assembler.executable
                        
                        cCompiler.withArguments {args ->
                            args << '-fPIC'
                            args.remove("-m32")
                        }
                        
                        linker.withArguments { args ->
                            args << '-shared'
                            args.remove('-m32')
                        }
                        
                        staticLibArchiver.executable = compilerPrefix + staticLibArchiver.executable
                    }
                }
                
                macGcc(Clang) {
                    target("arm") {
                        cCompiler.executable = compilerPrefix + "gcc"
                        linker.executable = compilerPrefix + "gcc"
                        assembler.executable = compilerPrefix + "gcc"
                        
                        cCompiler.withArguments {args ->
                            args << '-fPIC'
                            args.remove("-m32")
                        }
                        
                        linker.withArguments { args ->
                            args << '-shared'
                            args.remove('-m32')
                        }
                        
                        staticLibArchiver.executable = compilerPrefix + "ar"
                    }
                }
            }
        }
    }
}